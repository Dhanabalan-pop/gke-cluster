name: 'Terraform Cloud GCP Deployment'

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths: ['**.tf']

env:
  TF_ORG: "dhanabalan-gcp-org"
  TF_WORKSPACE: "gke-cluster"
  TF_API_URL: "https://app.terraform.io/api/v2"
  GCP_PROJECT: "sandbox-dev-dbg"
  GCP_REGION: "us-central1"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # ====================== SETUP ======================
      - name: Checkout code
        uses: actions/checkout@v4

      # ====================== GCP AUTH (WIF) ======================
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          create_credentials_file: true

      # ====================== TERRAFORM SETUP ======================
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.6.0"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Clean Terraform cache
        run: |
          rm -rf .terraform*
          rm -f *.tfstate*

      # ====================== TERRAFORM INIT ======================
      - name: Terraform Init
        run: terraform init -upgrade -input=false
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "${{ runner.temp }}/credentials.json"

      # ====================== TERRAFORM VALIDATE ======================
      - name: Validate Configuration
        run: terraform validate

      # ====================== API-BASED RUN ======================
      - name: Get Workspace ID
        id: get-workspace
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "$TF_API_URL/organizations/$TF_ORG/workspaces/$TF_WORKSPACE" \
            | jq -r '.data.id')
          echo "workspace_id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: Create Terraform Run
        id: create-run
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          RUN_PAYLOAD='{
            "data": {
              "attributes": {
                "message": "Triggered via GitHub Actions",
                "auto-apply": true
              },
              "type": "runs",
              "relationships": {
                "workspace": {
                  "data": {
                    "type": "workspaces",
                    "id": "'"${{ steps.get-workspace.outputs.workspace_id }}"'"
                  }
                }
              }
            }
          }'

          RESPONSE=$(curl -s -X POST \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --data "$RUN_PAYLOAD" \
            "$TF_API_URL/runs")

          RUN_ID=$(echo "$RESPONSE" | jq -r '.data.id')
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # ====================== MONITOR RUN ======================
      - name: Wait for Completion
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: |
          for i in {1..60}; do
            STATUS=$(curl -s \
              --header "Authorization: Bearer $TF_API_TOKEN" \
              "$TF_API_URL/runs/${{ steps.create-run.outputs.run_id }}" \
              | jq -r '.data.attributes.status')

            case $STATUS in
              "applied") echo "::notice::Applied successfully"; exit 0;;
              "errored") 
                echo "::error::Run failed"
                curl -s \
                  --header "Authorization: Bearer $TF_API_TOKEN" \
                  "$TF_API_URL/runs/${{ steps.create-run.outputs.run_id }}/apply" | jq
                exit 1;;
              *) echo "Status: $STATUS"; sleep 10;;
            esac
          done
          echo "::error::Timeout waiting for completion"
          exit 1